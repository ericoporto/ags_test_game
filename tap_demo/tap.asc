// Test Anything Protocol - Producer Module
// Script File
// 
// MIT License
// 
// Copyright (c) 2019 Érico Vieira Porto 
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

#define MAX_FAILED_TESTS 400
int _failed_tests[MAX_FAILED_TESTS];
String _test_filename;
int _test_count;
int _planned_tests;
int _fail_count;
int _pass_count;

void _clear_failed_tests(){
  _fail_count =0;
  for(int i=0; i<MAX_FAILED_TESTS; i++){
    _failed_tests[i]=-1;
  }
}

void _note_failed_test(int t_index){
  _failed_tests[_fail_count] = t_index;
  _fail_count++;
}

String _get_failed_tests(){
  String str = "";
  for(int i=0; i<_fail_count; i++){
    if(i>0) str = str.Append(", ");
    str = str.Append(String.Format("%d"));
  }
  return str;
}

void _check_test_filename(){
  if(_test_filename == null) {
    _test_filename = "$SAVEGAMEDIR$/";
    _test_filename = _test_filename.Append(DEFAULT_TEST_FILENAME);
  }  
}

void _test_printer(String str){
  _check_test_filename();
  
  File* file = null;
  if(!File.Exists(_test_filename)){
    file = File.Open(_test_filename, eFileWrite);
  } else {
    file = File.Open(_test_filename, eFileAppend);
  }
  
  file.WriteRawLine(str);
  file.Close();
}

void _ok(bool condition, String test_name){
  if(condition) {
    if(test_name!=null && test_name.Length > 0) {
      _test_printer(String.Format("ok %d - %s", _test_count, test_name));
    } else {
      _test_printer(String.Format("ok %d", _test_count));      
    }
    _pass_count++;
  } else {
    if(test_name!=null && test_name.Length > 0) {
      _test_printer(String.Format("not ok %d - %s", _test_count, test_name));
      _test_printer(String.Format("# Failed test '%s'", test_name));
    } else {
      _test_printer(String.Format("not ok %d", _test_count));
      _test_printer(String.Format("# Failed test", test_name));      
    }
    _note_failed_test(_test_count);
  }
  _test_count++;
}

void _clean_test(){
  _planned_tests = 0;
  _test_count = 1;
  _pass_count = 0;
  _clear_failed_tests();
  
}
// -- PUBLIC METHODS --

static void tap::clean_test(){
  _clean_test();
  _check_test_filename();
  
  File* file = null;
  if(File.Exists(_test_filename)){
    File.Delete(_test_filename);
  }  
}

static void tap::plan(int n,  String skip_reason){
  _clean_test();
  _planned_tests = n;
  if(n == NO_PLAN) return;
  if(n == SKIP_ALL) {
    // need to ignore everything until next done_testing  
    if(skip_reason != null && skip_reason.Length > 0){
      _test_printer(String.Format("SKIP %s\n", skip_reason));
    }
    return;
  } 
  _test_printer(String.Format("1..%d", n));
}

static void tap::ok(bool condition, String test_name){
  _ok(condition, test_name);
}

static void tap::nok(bool condition, String test_name){
  _ok(!condition, test_name);
}

static void tap::is(String got,  String expected, String test_name){
  bool test = got == expected;
  
  _ok(test, test_name);
  if(!test){
    _test_printer(String.Format("# got: %s", got));
    _test_printer(String.Format("# expected: %s", expected));
  }
}

static void tap::isnt(String got,  String expected, String test_name){
  bool test = got != expected;
  
  _ok(test, test_name);
  if(!test){
    _test_printer(String.Format("# got: %s", got));
    _test_printer(String.Format("# expected different than: %s", expected));
  }
}

static void tap::is_int(int got,  int expected, String test_name){
  bool test = got == expected;
  
  _ok(test, test_name);
  if(!test){
    _test_printer(String.Format("# got: %d", got));
    _test_printer(String.Format("# expected: %d", expected));
  }
}

static void tap::isnt_int(int got,  int expected, String test_name){
  bool test = got != expected;
  
  _ok(test, test_name);
  if(!test){
    _test_printer(String.Format("# got: %d", got));
    _test_printer(String.Format("# expected different than: %d", expected));
  }
}

static void tap::is_float(float got,  float expected, float epsilon, String test_name){
  bool test = (got + epsilon >= expected) && (got - epsilon <= expected);
  
  _ok(test, test_name);
  if(!test){
    _test_printer(String.Format("# got: %f", got));
    _test_printer(String.Format("# expected: %f", expected));
    _test_printer(String.Format("# epsilon: %f", epsilon));
  }
}

static void tap::isnt_float(float got,  float expected, float epsilon, String test_name){
  bool test = (got + epsilon < expected) && (got - epsilon > expected);
  
  _ok(test, test_name);
  if(!test){
    _test_printer(String.Format("# got: %f", got));
    _test_printer(String.Format("# expected different than: %f", expected));
    _test_printer(String.Format("# epsilon: %f", epsilon));
  }
}

static void tap::done_testing(){
  if(_planned_tests==NO_PLAN) {
    _test_printer(String.Format("1..%d",_test_count-1));
    _planned_tests = 0;
  }
  _test_printer(String.Format("# failed tests: %d", _fail_count));
  _test_printer(String.Format("# passed tests: %d", _pass_count));
  _test_printer(String.Format("# total tests: %d", _test_count-1));
  _test_printer(String.Format("# planned tests: %d", _planned_tests));  
}

static void tap::Harness(){
  if(_fail_count > 0) {
    _test_printer(String.Format("FAILED tests %s", _get_failed_tests()));
    _test_printer(String.Format("Failed %d/%d tests", _fail_count, _test_count-1));
  }
}